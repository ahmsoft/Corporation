'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AHMDB")>  _
Partial Public Class LinqDBClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertFaultLog(instance As FaultLog)
    End Sub
  Partial Private Sub UpdateFaultLog(instance As FaultLog)
    End Sub
  Partial Private Sub DeleteFaultLog(instance As FaultLog)
    End Sub
  Partial Private Sub InsertTask(instance As Task)
    End Sub
  Partial Private Sub UpdateTask(instance As Task)
    End Sub
  Partial Private Sub DeleteTask(instance As Task)
    End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertAbout(instance As About)
    End Sub
  Partial Private Sub UpdateAbout(instance As About)
    End Sub
  Partial Private Sub DeleteAbout(instance As About)
    End Sub
  Partial Private Sub InsertSetting(instance As Setting)
    End Sub
  Partial Private Sub UpdateSetting(instance As Setting)
    End Sub
  Partial Private Sub DeleteSetting(instance As Setting)
    End Sub
  Partial Private Sub InsertPage(instance As Page)
    End Sub
  Partial Private Sub UpdatePage(instance As Page)
    End Sub
  Partial Private Sub DeletePage(instance As Page)
    End Sub
  Partial Private Sub InsertNews1(instance As News1)
    End Sub
  Partial Private Sub UpdateNews1(instance As News1)
    End Sub
  Partial Private Sub DeleteNews1(instance As News1)
    End Sub
  Partial Private Sub InsertMessage(instance As Message)
    End Sub
  Partial Private Sub UpdateMessage(instance As Message)
    End Sub
  Partial Private Sub DeleteMessage(instance As Message)
    End Sub
  Partial Private Sub InsertContactUs(instance As ContactUs)
    End Sub
  Partial Private Sub UpdateContactUs(instance As ContactUs)
    End Sub
  Partial Private Sub DeleteContactUs(instance As ContactUs)
    End Sub
  Partial Private Sub InsertFAQ(instance As FAQ)
    End Sub
  Partial Private Sub UpdateFAQ(instance As FAQ)
    End Sub
  Partial Private Sub DeleteFAQ(instance As FAQ)
    End Sub
  Partial Private Sub InsertVisitor(instance As Visitor)
    End Sub
  Partial Private Sub UpdateVisitor(instance As Visitor)
    End Sub
  Partial Private Sub DeleteVisitor(instance As Visitor)
    End Sub
  Partial Private Sub InsertUsersOnlineDetail(instance As UsersOnlineDetail)
    End Sub
  Partial Private Sub UpdateUsersOnlineDetail(instance As UsersOnlineDetail)
    End Sub
  Partial Private Sub DeleteUsersOnlineDetail(instance As UsersOnlineDetail)
    End Sub
  Partial Private Sub InsertBlock(instance As Block)
    End Sub
  Partial Private Sub UpdateBlock(instance As Block)
    End Sub
  Partial Private Sub DeleteBlock(instance As Block)
    End Sub
  Partial Private Sub InsertCategory(instance As Category)
    End Sub
  Partial Private Sub UpdateCategory(instance As Category)
    End Sub
  Partial Private Sub DeleteCategory(instance As Category)
    End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  Partial Private Sub InsertComment(instance As Comment)
    End Sub
  Partial Private Sub UpdateComment(instance As Comment)
    End Sub
  Partial Private Sub DeleteComment(instance As Comment)
    End Sub
  Partial Private Sub InsertLink(instance As Link)
    End Sub
  Partial Private Sub UpdateLink(instance As Link)
    End Sub
  Partial Private Sub DeleteLink(instance As Link)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  Partial Private Sub InsertClient(instance As Client)
    End Sub
  Partial Private Sub UpdateClient(instance As Client)
    End Sub
  Partial Private Sub DeleteClient(instance As Client)
    End Sub
  Partial Private Sub InsertProcess(instance As Process)
    End Sub
  Partial Private Sub UpdateProcess(instance As Process)
    End Sub
  Partial Private Sub DeleteProcess(instance As Process)
    End Sub
  Partial Private Sub InsertContract(instance As Contract)
    End Sub
  Partial Private Sub UpdateContract(instance As Contract)
    End Sub
  Partial Private Sub DeleteContract(instance As Contract)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("AHMDBConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property FaultLogs() As System.Data.Linq.Table(Of FaultLog)
		Get
			Return Me.GetTable(Of FaultLog)
		End Get
	End Property
	
	Public ReadOnly Property Galleries() As System.Data.Linq.Table(Of Gallery)
		Get
			Return Me.GetTable(Of Gallery)
		End Get
	End Property
	
	Public ReadOnly Property Tasks() As System.Data.Linq.Table(Of Task)
		Get
			Return Me.GetTable(Of Task)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property Abouts() As System.Data.Linq.Table(Of About)
		Get
			Return Me.GetTable(Of About)
		End Get
	End Property
	
	Public ReadOnly Property Settings() As System.Data.Linq.Table(Of Setting)
		Get
			Return Me.GetTable(Of Setting)
		End Get
	End Property
	
	Public ReadOnly Property Pages() As System.Data.Linq.Table(Of Page)
		Get
			Return Me.GetTable(Of Page)
		End Get
	End Property
	
	Public ReadOnly Property News1s() As System.Data.Linq.Table(Of News1)
		Get
			Return Me.GetTable(Of News1)
		End Get
	End Property
	
	Public ReadOnly Property Messages() As System.Data.Linq.Table(Of Message)
		Get
			Return Me.GetTable(Of Message)
		End Get
	End Property
	
	Public ReadOnly Property ContactUs() As System.Data.Linq.Table(Of ContactUs)
		Get
			Return Me.GetTable(Of ContactUs)
		End Get
	End Property
	
	Public ReadOnly Property FAQs() As System.Data.Linq.Table(Of FAQ)
		Get
			Return Me.GetTable(Of FAQ)
		End Get
	End Property
	
	Public ReadOnly Property Visitors() As System.Data.Linq.Table(Of Visitor)
		Get
			Return Me.GetTable(Of Visitor)
		End Get
	End Property
	
	Public ReadOnly Property UsersOnlineDetails() As System.Data.Linq.Table(Of UsersOnlineDetail)
		Get
			Return Me.GetTable(Of UsersOnlineDetail)
		End Get
	End Property
	
	Public ReadOnly Property Blocks() As System.Data.Linq.Table(Of Block)
		Get
			Return Me.GetTable(Of Block)
		End Get
	End Property
	
	Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
		Get
			Return Me.GetTable(Of Category)
		End Get
	End Property
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
	
	Public ReadOnly Property Comments() As System.Data.Linq.Table(Of Comment)
		Get
			Return Me.GetTable(Of Comment)
		End Get
	End Property
	
	Public ReadOnly Property Links() As System.Data.Linq.Table(Of Link)
		Get
			Return Me.GetTable(Of Link)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
	
	Public ReadOnly Property Clients() As System.Data.Linq.Table(Of Client)
		Get
			Return Me.GetTable(Of Client)
		End Get
	End Property
	
	Public ReadOnly Property Processes() As System.Data.Linq.Table(Of Process)
		Get
			Return Me.GetTable(Of Process)
		End Get
	End Property
	
	Public ReadOnly Property Contracts() As System.Data.Linq.Table(Of Contract)
		Get
			Return Me.GetTable(Of Contract)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FaultLog")>  _
Partial Public Class FaultLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _PageName As String
	
	Private _ErrorMessage As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPageNameChanging(value As String)
    End Sub
    Partial Private Sub OnPageNameChanged()
    End Sub
    Partial Private Sub OnErrorMessageChanging(value As String)
    End Sub
    Partial Private Sub OnErrorMessageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageName", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property PageName() As String
		Get
			Return Me._PageName
		End Get
		Set
			If (String.Equals(Me._PageName, value) = false) Then
				Me.OnPageNameChanging(value)
				Me.SendPropertyChanging
				Me._PageName = value
				Me.SendPropertyChanged("PageName")
				Me.OnPageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ErrorMessage", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property ErrorMessage() As String
		Get
			Return Me._ErrorMessage
		End Get
		Set
			If (String.Equals(Me._ErrorMessage, value) = false) Then
				Me.OnErrorMessageChanging(value)
				Me.SendPropertyChanging
				Me._ErrorMessage = value
				Me.SendPropertyChanged("ErrorMessage")
				Me.OnErrorMessageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Gallery")>  _
Partial Public Class Gallery
	
	Private _IDG As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Location As String
	
	Private _Date As String
	
	Private _PicName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDG", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property IDG() As Integer
		Get
			Return Me._IDG
		End Get
		Set
			If ((Me._IDG = value)  _
						= false) Then
				Me._IDG = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me._Location = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me._Date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PicName", DbType:="NVarChar(1100) NOT NULL", CanBeNull:=false)>  _
	Public Property PicName() As String
		Get
			Return Me._PicName
		End Get
		Set
			If (String.Equals(Me._PicName, value) = false) Then
				Me._PicName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Task")>  _
Partial Public Class Task
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDT As Integer
	
	Private _TaskName As String
	
	Private _Priority As Integer
	
	Private _Status As String
	
	Private _StartDate As String
	
	Private _EndDate As String
	
	Private _AmountReceived As String
	
	Private _Benefit As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDTChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDTChanged()
    End Sub
    Partial Private Sub OnTaskNameChanging(value As String)
    End Sub
    Partial Private Sub OnTaskNameChanged()
    End Sub
    Partial Private Sub OnPriorityChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriorityChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As String)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As String)
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnAmountReceivedChanging(value As String)
    End Sub
    Partial Private Sub OnAmountReceivedChanged()
    End Sub
    Partial Private Sub OnBenefitChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDT", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDT() As Integer
		Get
			Return Me._IDT
		End Get
		Set
			If ((Me._IDT = value)  _
						= false) Then
				Me.OnIDTChanging(value)
				Me.SendPropertyChanging
				Me._IDT = value
				Me.SendPropertyChanged("IDT")
				Me.OnIDTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaskName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property TaskName() As String
		Get
			Return Me._TaskName
		End Get
		Set
			If (String.Equals(Me._TaskName, value) = false) Then
				Me.OnTaskNameChanging(value)
				Me.SendPropertyChanging
				Me._TaskName = value
				Me.SendPropertyChanged("TaskName")
				Me.OnTaskNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int NOT NULL")>  _
	Public Property Priority() As Integer
		Get
			Return Me._Priority
		End Get
		Set
			If ((Me._Priority = value)  _
						= false) Then
				Me.OnPriorityChanging(value)
				Me.SendPropertyChanging
				Me._Priority = value
				Me.SendPropertyChanged("Priority")
				Me.OnPriorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property StartDate() As String
		Get
			Return Me._StartDate
		End Get
		Set
			If (String.Equals(Me._StartDate, value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property EndDate() As String
		Get
			Return Me._EndDate
		End Get
		Set
			If (String.Equals(Me._EndDate, value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmountReceived", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property AmountReceived() As String
		Get
			Return Me._AmountReceived
		End Get
		Set
			If (String.Equals(Me._AmountReceived, value) = false) Then
				Me.OnAmountReceivedChanging(value)
				Me.SendPropertyChanging
				Me._AmountReceived = value
				Me.SendPropertyChanged("AmountReceived")
				Me.OnAmountReceivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Benefit", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Benefit() As String
		Get
			Return Me._Benefit
		End Get
		Set
			If (String.Equals(Me._Benefit, value) = false) Then
				Me.OnBenefitChanging(value)
				Me.SendPropertyChanging
				Me._Benefit = value
				Me.SendPropertyChanged("Benefit")
				Me.OnBenefitChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[User]")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDU As Integer
	
	Private _Name As String
	
	Private _Family As String
	
	Private _Username As String
	
	Private _IsMan As Boolean
	
	Private _Birthday As String
	
	Private _SchoolName As String
	
	Private _Email As String
	
	Private _Phone As String
	
	Private _Password As String
	
	Private _Supervisor As Integer
	
	Private _Photo As String
	
	Private _No1 As Integer
	
	Private _No2 As Integer
	
	Private _No3 As Integer
	
	Private _No4 As Integer
	
	Private _No5 As Integer
	
	Private _No6 As Integer
	
	Private _Message As String
	
	Private _Active As Boolean
	
	Private _Request As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDUChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDUChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnFamilyChanging(value As String)
    End Sub
    Partial Private Sub OnFamilyChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnIsManChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsManChanged()
    End Sub
    Partial Private Sub OnBirthdayChanging(value As String)
    End Sub
    Partial Private Sub OnBirthdayChanged()
    End Sub
    Partial Private Sub OnSchoolNameChanging(value As String)
    End Sub
    Partial Private Sub OnSchoolNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnSupervisorChanging(value As Integer)
    End Sub
    Partial Private Sub OnSupervisorChanged()
    End Sub
    Partial Private Sub OnPhotoChanging(value As String)
    End Sub
    Partial Private Sub OnPhotoChanged()
    End Sub
    Partial Private Sub OnNo1Changing(value As Integer)
    End Sub
    Partial Private Sub OnNo1Changed()
    End Sub
    Partial Private Sub OnNo2Changing(value As Integer)
    End Sub
    Partial Private Sub OnNo2Changed()
    End Sub
    Partial Private Sub OnNo3Changing(value As Integer)
    End Sub
    Partial Private Sub OnNo3Changed()
    End Sub
    Partial Private Sub OnNo4Changing(value As Integer)
    End Sub
    Partial Private Sub OnNo4Changed()
    End Sub
    Partial Private Sub OnNo5Changing(value As Integer)
    End Sub
    Partial Private Sub OnNo5Changed()
    End Sub
    Partial Private Sub OnNo6Changing(value As Integer)
    End Sub
    Partial Private Sub OnNo6Changed()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnRequestChanging(value As String)
    End Sub
    Partial Private Sub OnRequestChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDU", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDU() As Integer
		Get
			Return Me._IDU
		End Get
		Set
			If ((Me._IDU = value)  _
						= false) Then
				Me.OnIDUChanging(value)
				Me.SendPropertyChanging
				Me._IDU = value
				Me.SendPropertyChanged("IDU")
				Me.OnIDUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Family", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Family() As String
		Get
			Return Me._Family
		End Get
		Set
			If (String.Equals(Me._Family, value) = false) Then
				Me.OnFamilyChanging(value)
				Me.SendPropertyChanging
				Me._Family = value
				Me.SendPropertyChanged("Family")
				Me.OnFamilyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMan", DbType:="Bit NOT NULL")>  _
	Public Property IsMan() As Boolean
		Get
			Return Me._IsMan
		End Get
		Set
			If ((Me._IsMan = value)  _
						= false) Then
				Me.OnIsManChanging(value)
				Me.SendPropertyChanging
				Me._IsMan = value
				Me.SendPropertyChanged("IsMan")
				Me.OnIsManChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Birthday", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Birthday() As String
		Get
			Return Me._Birthday
		End Get
		Set
			If (String.Equals(Me._Birthday, value) = false) Then
				Me.OnBirthdayChanging(value)
				Me.SendPropertyChanging
				Me._Birthday = value
				Me.SendPropertyChanged("Birthday")
				Me.OnBirthdayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property SchoolName() As String
		Get
			Return Me._SchoolName
		End Get
		Set
			If (String.Equals(Me._SchoolName, value) = false) Then
				Me.OnSchoolNameChanging(value)
				Me.SendPropertyChanging
				Me._SchoolName = value
				Me.SendPropertyChanged("SchoolName")
				Me.OnSchoolNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supervisor", DbType:="Int NOT NULL")>  _
	Public Property Supervisor() As Integer
		Get
			Return Me._Supervisor
		End Get
		Set
			If ((Me._Supervisor = value)  _
						= false) Then
				Me.OnSupervisorChanging(value)
				Me.SendPropertyChanging
				Me._Supervisor = value
				Me.SendPropertyChanged("Supervisor")
				Me.OnSupervisorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Photo", DbType:="NVarChar(1100) NOT NULL", CanBeNull:=false)>  _
	Public Property Photo() As String
		Get
			Return Me._Photo
		End Get
		Set
			If (String.Equals(Me._Photo, value) = false) Then
				Me.OnPhotoChanging(value)
				Me.SendPropertyChanging
				Me._Photo = value
				Me.SendPropertyChanged("Photo")
				Me.OnPhotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No1", DbType:="Int NOT NULL")>  _
	Public Property No1() As Integer
		Get
			Return Me._No1
		End Get
		Set
			If ((Me._No1 = value)  _
						= false) Then
				Me.OnNo1Changing(value)
				Me.SendPropertyChanging
				Me._No1 = value
				Me.SendPropertyChanged("No1")
				Me.OnNo1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No2", DbType:="Int NOT NULL")>  _
	Public Property No2() As Integer
		Get
			Return Me._No2
		End Get
		Set
			If ((Me._No2 = value)  _
						= false) Then
				Me.OnNo2Changing(value)
				Me.SendPropertyChanging
				Me._No2 = value
				Me.SendPropertyChanged("No2")
				Me.OnNo2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No3", DbType:="Int NOT NULL")>  _
	Public Property No3() As Integer
		Get
			Return Me._No3
		End Get
		Set
			If ((Me._No3 = value)  _
						= false) Then
				Me.OnNo3Changing(value)
				Me.SendPropertyChanging
				Me._No3 = value
				Me.SendPropertyChanged("No3")
				Me.OnNo3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No4", DbType:="Int NOT NULL")>  _
	Public Property No4() As Integer
		Get
			Return Me._No4
		End Get
		Set
			If ((Me._No4 = value)  _
						= false) Then
				Me.OnNo4Changing(value)
				Me.SendPropertyChanging
				Me._No4 = value
				Me.SendPropertyChanged("No4")
				Me.OnNo4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No5", DbType:="Int NOT NULL")>  _
	Public Property No5() As Integer
		Get
			Return Me._No5
		End Get
		Set
			If ((Me._No5 = value)  _
						= false) Then
				Me.OnNo5Changing(value)
				Me.SendPropertyChanging
				Me._No5 = value
				Me.SendPropertyChanged("No5")
				Me.OnNo5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No6", DbType:="Int NOT NULL")>  _
	Public Property No6() As Integer
		Get
			Return Me._No6
		End Get
		Set
			If ((Me._No6 = value)  _
						= false) Then
				Me.OnNo6Changing(value)
				Me.SendPropertyChanging
				Me._No6 = value
				Me.SendPropertyChanged("No6")
				Me.OnNo6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Message() As String
		Get
			Return Me._Message
		End Get
		Set
			If (String.Equals(Me._Message, value) = false) Then
				Me.OnMessageChanging(value)
				Me.SendPropertyChanging
				Me._Message = value
				Me.SendPropertyChanged("Message")
				Me.OnMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Request", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Request() As String
		Get
			Return Me._Request
		End Get
		Set
			If (String.Equals(Me._Request, value) = false) Then
				Me.OnRequestChanging(value)
				Me.SendPropertyChanging
				Me._Request = value
				Me.SendPropertyChanged("Request")
				Me.OnRequestChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.About")>  _
Partial Public Class About
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDA As Integer
	
	Private _AboutManager As String
	
	Private _ManagerPic As String
	
	Private _AboutSite As String
	
	Private _Contact As String
	
	Private _Biography As String
	
	Private _BiographyPic As String
	
	Private _ManagerKeyword As String
	
	Private _SiteKeyword As String
	
	Private _BiographyKeyword As String
	
	Private _Mobile As String
	
	Private _Address As String
	
	Private _Telephone As String
	
	Private _Telegram As String
	
	Private _Instagram As String
	
	Private _Facebook As String
	
	Private _Twitter As String
	
	Private _Googleplus As String
	
	Private _Linkedin As String
	
	Private _WorkingHours As String
	
	Private _BodyContact As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDAChanged()
    End Sub
    Partial Private Sub OnAboutManagerChanging(value As String)
    End Sub
    Partial Private Sub OnAboutManagerChanged()
    End Sub
    Partial Private Sub OnManagerPicChanging(value As String)
    End Sub
    Partial Private Sub OnManagerPicChanged()
    End Sub
    Partial Private Sub OnAboutSiteChanging(value As String)
    End Sub
    Partial Private Sub OnAboutSiteChanged()
    End Sub
    Partial Private Sub OnContactChanging(value As String)
    End Sub
    Partial Private Sub OnContactChanged()
    End Sub
    Partial Private Sub OnBiographyChanging(value As String)
    End Sub
    Partial Private Sub OnBiographyChanged()
    End Sub
    Partial Private Sub OnBiographyPicChanging(value As String)
    End Sub
    Partial Private Sub OnBiographyPicChanged()
    End Sub
    Partial Private Sub OnManagerKeywordChanging(value As String)
    End Sub
    Partial Private Sub OnManagerKeywordChanged()
    End Sub
    Partial Private Sub OnSiteKeywordChanging(value As String)
    End Sub
    Partial Private Sub OnSiteKeywordChanged()
    End Sub
    Partial Private Sub OnBiographyKeywordChanging(value As String)
    End Sub
    Partial Private Sub OnBiographyKeywordChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnTelephoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelephoneChanged()
    End Sub
    Partial Private Sub OnTelegramChanging(value As String)
    End Sub
    Partial Private Sub OnTelegramChanged()
    End Sub
    Partial Private Sub OnInstagramChanging(value As String)
    End Sub
    Partial Private Sub OnInstagramChanged()
    End Sub
    Partial Private Sub OnFacebookChanging(value As String)
    End Sub
    Partial Private Sub OnFacebookChanged()
    End Sub
    Partial Private Sub OnTwitterChanging(value As String)
    End Sub
    Partial Private Sub OnTwitterChanged()
    End Sub
    Partial Private Sub OnGoogleplusChanging(value As String)
    End Sub
    Partial Private Sub OnGoogleplusChanged()
    End Sub
    Partial Private Sub OnLinkedinChanging(value As String)
    End Sub
    Partial Private Sub OnLinkedinChanged()
    End Sub
    Partial Private Sub OnWorkingHoursChanging(value As String)
    End Sub
    Partial Private Sub OnWorkingHoursChanged()
    End Sub
    Partial Private Sub OnBodyContactChanging(value As String)
    End Sub
    Partial Private Sub OnBodyContactChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDA() As Integer
		Get
			Return Me._IDA
		End Get
		Set
			If ((Me._IDA = value)  _
						= false) Then
				Me.OnIDAChanging(value)
				Me.SendPropertyChanging
				Me._IDA = value
				Me.SendPropertyChanged("IDA")
				Me.OnIDAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AboutManager", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property AboutManager() As String
		Get
			Return Me._AboutManager
		End Get
		Set
			If (String.Equals(Me._AboutManager, value) = false) Then
				Me.OnAboutManagerChanging(value)
				Me.SendPropertyChanging
				Me._AboutManager = value
				Me.SendPropertyChanged("AboutManager")
				Me.OnAboutManagerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ManagerPic", DbType:="NVarChar(1100)")>  _
	Public Property ManagerPic() As String
		Get
			Return Me._ManagerPic
		End Get
		Set
			If (String.Equals(Me._ManagerPic, value) = false) Then
				Me.OnManagerPicChanging(value)
				Me.SendPropertyChanging
				Me._ManagerPic = value
				Me.SendPropertyChanged("ManagerPic")
				Me.OnManagerPicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AboutSite", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property AboutSite() As String
		Get
			Return Me._AboutSite
		End Get
		Set
			If (String.Equals(Me._AboutSite, value) = false) Then
				Me.OnAboutSiteChanging(value)
				Me.SendPropertyChanging
				Me._AboutSite = value
				Me.SendPropertyChanged("AboutSite")
				Me.OnAboutSiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contact", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Contact() As String
		Get
			Return Me._Contact
		End Get
		Set
			If (String.Equals(Me._Contact, value) = false) Then
				Me.OnContactChanging(value)
				Me.SendPropertyChanging
				Me._Contact = value
				Me.SendPropertyChanged("Contact")
				Me.OnContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Biography", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Biography() As String
		Get
			Return Me._Biography
		End Get
		Set
			If (String.Equals(Me._Biography, value) = false) Then
				Me.OnBiographyChanging(value)
				Me.SendPropertyChanging
				Me._Biography = value
				Me.SendPropertyChanged("Biography")
				Me.OnBiographyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BiographyPic", DbType:="NVarChar(1100)")>  _
	Public Property BiographyPic() As String
		Get
			Return Me._BiographyPic
		End Get
		Set
			If (String.Equals(Me._BiographyPic, value) = false) Then
				Me.OnBiographyPicChanging(value)
				Me.SendPropertyChanging
				Me._BiographyPic = value
				Me.SendPropertyChanged("BiographyPic")
				Me.OnBiographyPicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ManagerKeyword", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property ManagerKeyword() As String
		Get
			Return Me._ManagerKeyword
		End Get
		Set
			If (String.Equals(Me._ManagerKeyword, value) = false) Then
				Me.OnManagerKeywordChanging(value)
				Me.SendPropertyChanging
				Me._ManagerKeyword = value
				Me.SendPropertyChanged("ManagerKeyword")
				Me.OnManagerKeywordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteKeyword", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property SiteKeyword() As String
		Get
			Return Me._SiteKeyword
		End Get
		Set
			If (String.Equals(Me._SiteKeyword, value) = false) Then
				Me.OnSiteKeywordChanging(value)
				Me.SendPropertyChanging
				Me._SiteKeyword = value
				Me.SendPropertyChanged("SiteKeyword")
				Me.OnSiteKeywordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BiographyKeyword", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property BiographyKeyword() As String
		Get
			Return Me._BiographyKeyword
		End Get
		Set
			If (String.Equals(Me._BiographyKeyword, value) = false) Then
				Me.OnBiographyKeywordChanging(value)
				Me.SendPropertyChanging
				Me._BiographyKeyword = value
				Me.SendPropertyChanged("BiographyKeyword")
				Me.OnBiographyKeywordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NVarChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telephone", DbType:="NChar(11) NOT NULL", CanBeNull:=false)>  _
	Public Property Telephone() As String
		Get
			Return Me._Telephone
		End Get
		Set
			If (String.Equals(Me._Telephone, value) = false) Then
				Me.OnTelephoneChanging(value)
				Me.SendPropertyChanging
				Me._Telephone = value
				Me.SendPropertyChanged("Telephone")
				Me.OnTelephoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telegram", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Telegram() As String
		Get
			Return Me._Telegram
		End Get
		Set
			If (String.Equals(Me._Telegram, value) = false) Then
				Me.OnTelegramChanging(value)
				Me.SendPropertyChanging
				Me._Telegram = value
				Me.SendPropertyChanged("Telegram")
				Me.OnTelegramChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instagram", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Instagram() As String
		Get
			Return Me._Instagram
		End Get
		Set
			If (String.Equals(Me._Instagram, value) = false) Then
				Me.OnInstagramChanging(value)
				Me.SendPropertyChanging
				Me._Instagram = value
				Me.SendPropertyChanged("Instagram")
				Me.OnInstagramChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Facebook", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Facebook() As String
		Get
			Return Me._Facebook
		End Get
		Set
			If (String.Equals(Me._Facebook, value) = false) Then
				Me.OnFacebookChanging(value)
				Me.SendPropertyChanging
				Me._Facebook = value
				Me.SendPropertyChanged("Facebook")
				Me.OnFacebookChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Twitter", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Twitter() As String
		Get
			Return Me._Twitter
		End Get
		Set
			If (String.Equals(Me._Twitter, value) = false) Then
				Me.OnTwitterChanging(value)
				Me.SendPropertyChanging
				Me._Twitter = value
				Me.SendPropertyChanged("Twitter")
				Me.OnTwitterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Googleplus", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Googleplus() As String
		Get
			Return Me._Googleplus
		End Get
		Set
			If (String.Equals(Me._Googleplus, value) = false) Then
				Me.OnGoogleplusChanging(value)
				Me.SendPropertyChanging
				Me._Googleplus = value
				Me.SendPropertyChanged("Googleplus")
				Me.OnGoogleplusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Linkedin", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Linkedin() As String
		Get
			Return Me._Linkedin
		End Get
		Set
			If (String.Equals(Me._Linkedin, value) = false) Then
				Me.OnLinkedinChanging(value)
				Me.SendPropertyChanging
				Me._Linkedin = value
				Me.SendPropertyChanged("Linkedin")
				Me.OnLinkedinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkingHours", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property WorkingHours() As String
		Get
			Return Me._WorkingHours
		End Get
		Set
			If (String.Equals(Me._WorkingHours, value) = false) Then
				Me.OnWorkingHoursChanging(value)
				Me.SendPropertyChanging
				Me._WorkingHours = value
				Me.SendPropertyChanged("WorkingHours")
				Me.OnWorkingHoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BodyContact", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property BodyContact() As String
		Get
			Return Me._BodyContact
		End Get
		Set
			If (String.Equals(Me._BodyContact, value) = false) Then
				Me.OnBodyContactChanging(value)
				Me.SendPropertyChanging
				Me._BodyContact = value
				Me.SendPropertyChanged("BodyContact")
				Me.OnBodyContactChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Setting")>  _
Partial Public Class Setting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _NameSite As String
	
	Private _TitleSite As String
	
	Private _Banner As String
	
	Private _PostBackColor As String
	
	Private _BlockBackColor As String
	
	Private _BackgroundColor As String
	
	Private _MenuColor As String
	
	Private _CentralColor As String
	
	Private _FooterColor As String
	
	Private _Background_Image As String
	
	Private _Menu_Image As String
	
	Private _TitleBackColor As String
	
	Private _TitleForeColor As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameSiteChanging(value As String)
    End Sub
    Partial Private Sub OnNameSiteChanged()
    End Sub
    Partial Private Sub OnTitleSiteChanging(value As String)
    End Sub
    Partial Private Sub OnTitleSiteChanged()
    End Sub
    Partial Private Sub OnBannerChanging(value As String)
    End Sub
    Partial Private Sub OnBannerChanged()
    End Sub
    Partial Private Sub OnPostBackColorChanging(value As String)
    End Sub
    Partial Private Sub OnPostBackColorChanged()
    End Sub
    Partial Private Sub OnBlockBackColorChanging(value As String)
    End Sub
    Partial Private Sub OnBlockBackColorChanged()
    End Sub
    Partial Private Sub OnBackgroundColorChanging(value As String)
    End Sub
    Partial Private Sub OnBackgroundColorChanged()
    End Sub
    Partial Private Sub OnMenuColorChanging(value As String)
    End Sub
    Partial Private Sub OnMenuColorChanged()
    End Sub
    Partial Private Sub OnCentralColorChanging(value As String)
    End Sub
    Partial Private Sub OnCentralColorChanged()
    End Sub
    Partial Private Sub OnFooterColorChanging(value As String)
    End Sub
    Partial Private Sub OnFooterColorChanged()
    End Sub
    Partial Private Sub OnBackground_ImageChanging(value As String)
    End Sub
    Partial Private Sub OnBackground_ImageChanged()
    End Sub
    Partial Private Sub OnMenu_ImageChanging(value As String)
    End Sub
    Partial Private Sub OnMenu_ImageChanged()
    End Sub
    Partial Private Sub OnTitleBackColorChanging(value As String)
    End Sub
    Partial Private Sub OnTitleBackColorChanged()
    End Sub
    Partial Private Sub OnTitleForeColorChanging(value As String)
    End Sub
    Partial Private Sub OnTitleForeColorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameSite", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property NameSite() As String
		Get
			Return Me._NameSite
		End Get
		Set
			If (String.Equals(Me._NameSite, value) = false) Then
				Me.OnNameSiteChanging(value)
				Me.SendPropertyChanging
				Me._NameSite = value
				Me.SendPropertyChanged("NameSite")
				Me.OnNameSiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitleSite", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property TitleSite() As String
		Get
			Return Me._TitleSite
		End Get
		Set
			If (String.Equals(Me._TitleSite, value) = false) Then
				Me.OnTitleSiteChanging(value)
				Me.SendPropertyChanging
				Me._TitleSite = value
				Me.SendPropertyChanged("TitleSite")
				Me.OnTitleSiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Banner", DbType:="NVarChar(1100) NOT NULL", CanBeNull:=false)>  _
	Public Property Banner() As String
		Get
			Return Me._Banner
		End Get
		Set
			If (String.Equals(Me._Banner, value) = false) Then
				Me.OnBannerChanging(value)
				Me.SendPropertyChanging
				Me._Banner = value
				Me.SendPropertyChanged("Banner")
				Me.OnBannerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostBackColor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PostBackColor() As String
		Get
			Return Me._PostBackColor
		End Get
		Set
			If (String.Equals(Me._PostBackColor, value) = false) Then
				Me.OnPostBackColorChanging(value)
				Me.SendPropertyChanging
				Me._PostBackColor = value
				Me.SendPropertyChanged("PostBackColor")
				Me.OnPostBackColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BlockBackColor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BlockBackColor() As String
		Get
			Return Me._BlockBackColor
		End Get
		Set
			If (String.Equals(Me._BlockBackColor, value) = false) Then
				Me.OnBlockBackColorChanging(value)
				Me.SendPropertyChanging
				Me._BlockBackColor = value
				Me.SendPropertyChanged("BlockBackColor")
				Me.OnBlockBackColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BackgroundColor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BackgroundColor() As String
		Get
			Return Me._BackgroundColor
		End Get
		Set
			If (String.Equals(Me._BackgroundColor, value) = false) Then
				Me.OnBackgroundColorChanging(value)
				Me.SendPropertyChanging
				Me._BackgroundColor = value
				Me.SendPropertyChanged("BackgroundColor")
				Me.OnBackgroundColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuColor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MenuColor() As String
		Get
			Return Me._MenuColor
		End Get
		Set
			If (String.Equals(Me._MenuColor, value) = false) Then
				Me.OnMenuColorChanging(value)
				Me.SendPropertyChanging
				Me._MenuColor = value
				Me.SendPropertyChanged("MenuColor")
				Me.OnMenuColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CentralColor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CentralColor() As String
		Get
			Return Me._CentralColor
		End Get
		Set
			If (String.Equals(Me._CentralColor, value) = false) Then
				Me.OnCentralColorChanging(value)
				Me.SendPropertyChanging
				Me._CentralColor = value
				Me.SendPropertyChanged("CentralColor")
				Me.OnCentralColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FooterColor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FooterColor() As String
		Get
			Return Me._FooterColor
		End Get
		Set
			If (String.Equals(Me._FooterColor, value) = false) Then
				Me.OnFooterColorChanging(value)
				Me.SendPropertyChanging
				Me._FooterColor = value
				Me.SendPropertyChanged("FooterColor")
				Me.OnFooterColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Background-Image]", Storage:="_Background_Image", DbType:="NVarChar(1100) NOT NULL", CanBeNull:=false)>  _
	Public Property Background_Image() As String
		Get
			Return Me._Background_Image
		End Get
		Set
			If (String.Equals(Me._Background_Image, value) = false) Then
				Me.OnBackground_ImageChanging(value)
				Me.SendPropertyChanging
				Me._Background_Image = value
				Me.SendPropertyChanged("Background_Image")
				Me.OnBackground_ImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Menu_Image", DbType:="NVarChar(1100) NOT NULL", CanBeNull:=false)>  _
	Public Property Menu_Image() As String
		Get
			Return Me._Menu_Image
		End Get
		Set
			If (String.Equals(Me._Menu_Image, value) = false) Then
				Me.OnMenu_ImageChanging(value)
				Me.SendPropertyChanging
				Me._Menu_Image = value
				Me.SendPropertyChanged("Menu_Image")
				Me.OnMenu_ImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitleBackColor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TitleBackColor() As String
		Get
			Return Me._TitleBackColor
		End Get
		Set
			If (String.Equals(Me._TitleBackColor, value) = false) Then
				Me.OnTitleBackColorChanging(value)
				Me.SendPropertyChanging
				Me._TitleBackColor = value
				Me.SendPropertyChanged("TitleBackColor")
				Me.OnTitleBackColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitleForeColor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TitleForeColor() As String
		Get
			Return Me._TitleForeColor
		End Get
		Set
			If (String.Equals(Me._TitleForeColor, value) = false) Then
				Me.OnTitleForeColorChanging(value)
				Me.SendPropertyChanging
				Me._TitleForeColor = value
				Me.SendPropertyChanged("TitleForeColor")
				Me.OnTitleForeColorChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Page")>  _
Partial Public Class Page
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _PageTitle As String
	
	Private _Body As String
	
	Private _Address As String
	
	Private _Keyword As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnPageTitleChanging(value As String)
    End Sub
    Partial Private Sub OnPageTitleChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnKeywordChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageTitle", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property PageTitle() As String
		Get
			Return Me._PageTitle
		End Get
		Set
			If (String.Equals(Me._PageTitle, value) = false) Then
				Me.OnPageTitleChanging(value)
				Me.SendPropertyChanging
				Me._PageTitle = value
				Me.SendPropertyChanged("PageTitle")
				Me.OnPageTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keyword", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Keyword() As String
		Get
			Return Me._Keyword
		End Get
		Set
			If (String.Equals(Me._Keyword, value) = false) Then
				Me.OnKeywordChanging(value)
				Me.SendPropertyChanging
				Me._Keyword = value
				Me.SendPropertyChanged("Keyword")
				Me.OnKeywordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.News1")>  _
Partial Public Class News1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDN As Integer
	
	Private _Title As String
	
	Private _MSG As String
	
	Private _Date As String
	
	Private _Time As String
	
	Private _IsShow As Boolean
	
	Private _Priority As Integer
	
	Private _Access As String
	
	Private _Keyword As String
	
	Private _Pic As String
	
	Private _Moment As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDNChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDNChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnMSGChanging(value As String)
    End Sub
    Partial Private Sub OnMSGChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As String)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnTimeChanging(value As String)
    End Sub
    Partial Private Sub OnTimeChanged()
    End Sub
    Partial Private Sub OnIsShowChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsShowChanged()
    End Sub
    Partial Private Sub OnPriorityChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriorityChanged()
    End Sub
    Partial Private Sub OnAccessChanging(value As String)
    End Sub
    Partial Private Sub OnAccessChanged()
    End Sub
    Partial Private Sub OnKeywordChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordChanged()
    End Sub
    Partial Private Sub OnPicChanging(value As String)
    End Sub
    Partial Private Sub OnPicChanged()
    End Sub
    Partial Private Sub OnMomentChanging(value As String)
    End Sub
    Partial Private Sub OnMomentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDN() As Integer
		Get
			Return Me._IDN
		End Get
		Set
			If ((Me._IDN = value)  _
						= false) Then
				Me.OnIDNChanging(value)
				Me.SendPropertyChanging
				Me._IDN = value
				Me.SendPropertyChanged("IDN")
				Me.OnIDNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MSG", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property MSG() As String
		Get
			Return Me._MSG
		End Get
		Set
			If (String.Equals(Me._MSG, value) = false) Then
				Me.OnMSGChanging(value)
				Me.SendPropertyChanging
				Me._MSG = value
				Me.SendPropertyChanged("MSG")
				Me.OnMSGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Time", DbType:="NVarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property Time() As String
		Get
			Return Me._Time
		End Get
		Set
			If (String.Equals(Me._Time, value) = false) Then
				Me.OnTimeChanging(value)
				Me.SendPropertyChanging
				Me._Time = value
				Me.SendPropertyChanged("Time")
				Me.OnTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsShow", DbType:="Bit NOT NULL")>  _
	Public Property IsShow() As Boolean
		Get
			Return Me._IsShow
		End Get
		Set
			If ((Me._IsShow = value)  _
						= false) Then
				Me.OnIsShowChanging(value)
				Me.SendPropertyChanging
				Me._IsShow = value
				Me.SendPropertyChanged("IsShow")
				Me.OnIsShowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int NOT NULL")>  _
	Public Property Priority() As Integer
		Get
			Return Me._Priority
		End Get
		Set
			If ((Me._Priority = value)  _
						= false) Then
				Me.OnPriorityChanging(value)
				Me.SendPropertyChanging
				Me._Priority = value
				Me.SendPropertyChanged("Priority")
				Me.OnPriorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Access", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Access() As String
		Get
			Return Me._Access
		End Get
		Set
			If (String.Equals(Me._Access, value) = false) Then
				Me.OnAccessChanging(value)
				Me.SendPropertyChanging
				Me._Access = value
				Me.SendPropertyChanged("Access")
				Me.OnAccessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keyword", DbType:="NVarChar(500)")>  _
	Public Property Keyword() As String
		Get
			Return Me._Keyword
		End Get
		Set
			If (String.Equals(Me._Keyword, value) = false) Then
				Me.OnKeywordChanging(value)
				Me.SendPropertyChanging
				Me._Keyword = value
				Me.SendPropertyChanged("Keyword")
				Me.OnKeywordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pic", DbType:="NVarChar(1100)")>  _
	Public Property Pic() As String
		Get
			Return Me._Pic
		End Get
		Set
			If (String.Equals(Me._Pic, value) = false) Then
				Me.OnPicChanging(value)
				Me.SendPropertyChanging
				Me._Pic = value
				Me.SendPropertyChanged("Pic")
				Me.OnPicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Moment", DbType:="NVarChar(50)")>  _
	Public Property Moment() As String
		Get
			Return Me._Moment
		End Get
		Set
			If (String.Equals(Me._Moment, value) = false) Then
				Me.OnMomentChanging(value)
				Me.SendPropertyChanging
				Me._Moment = value
				Me.SendPropertyChanged("Moment")
				Me.OnMomentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Message")>  _
Partial Public Class Message
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDM As Integer
	
	Private _Title As String
	
	Private _MSG As String
	
	Private _Date As String
	
	Private _Time As String
	
	Private _IDC As Integer
	
	Private _Rank As Integer
	
	Private _IsShow As Boolean
	
	Private _Priority As Integer
	
	Private _Access As String
	
	Private _Keyword As String
	
	Private _Pic As String
	
	Private _Moment As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDMChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDMChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnMSGChanging(value As String)
    End Sub
    Partial Private Sub OnMSGChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As String)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnTimeChanging(value As String)
    End Sub
    Partial Private Sub OnTimeChanged()
    End Sub
    Partial Private Sub OnIDCChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDCChanged()
    End Sub
    Partial Private Sub OnRankChanging(value As Integer)
    End Sub
    Partial Private Sub OnRankChanged()
    End Sub
    Partial Private Sub OnIsShowChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsShowChanged()
    End Sub
    Partial Private Sub OnPriorityChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriorityChanged()
    End Sub
    Partial Private Sub OnAccessChanging(value As String)
    End Sub
    Partial Private Sub OnAccessChanged()
    End Sub
    Partial Private Sub OnKeywordChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordChanged()
    End Sub
    Partial Private Sub OnPicChanging(value As String)
    End Sub
    Partial Private Sub OnPicChanged()
    End Sub
    Partial Private Sub OnMomentChanging(value As String)
    End Sub
    Partial Private Sub OnMomentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDM", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDM() As Integer
		Get
			Return Me._IDM
		End Get
		Set
			If ((Me._IDM = value)  _
						= false) Then
				Me.OnIDMChanging(value)
				Me.SendPropertyChanging
				Me._IDM = value
				Me.SendPropertyChanged("IDM")
				Me.OnIDMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MSG", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property MSG() As String
		Get
			Return Me._MSG
		End Get
		Set
			If (String.Equals(Me._MSG, value) = false) Then
				Me.OnMSGChanging(value)
				Me.SendPropertyChanging
				Me._MSG = value
				Me.SendPropertyChanged("MSG")
				Me.OnMSGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Time", DbType:="NVarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property Time() As String
		Get
			Return Me._Time
		End Get
		Set
			If (String.Equals(Me._Time, value) = false) Then
				Me.OnTimeChanging(value)
				Me.SendPropertyChanging
				Me._Time = value
				Me.SendPropertyChanged("Time")
				Me.OnTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDC", DbType:="Int NOT NULL")>  _
	Public Property IDC() As Integer
		Get
			Return Me._IDC
		End Get
		Set
			If ((Me._IDC = value)  _
						= false) Then
				Me.OnIDCChanging(value)
				Me.SendPropertyChanging
				Me._IDC = value
				Me.SendPropertyChanged("IDC")
				Me.OnIDCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rank", DbType:="Int NOT NULL")>  _
	Public Property Rank() As Integer
		Get
			Return Me._Rank
		End Get
		Set
			If ((Me._Rank = value)  _
						= false) Then
				Me.OnRankChanging(value)
				Me.SendPropertyChanging
				Me._Rank = value
				Me.SendPropertyChanged("Rank")
				Me.OnRankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsShow", DbType:="Bit NOT NULL")>  _
	Public Property IsShow() As Boolean
		Get
			Return Me._IsShow
		End Get
		Set
			If ((Me._IsShow = value)  _
						= false) Then
				Me.OnIsShowChanging(value)
				Me.SendPropertyChanging
				Me._IsShow = value
				Me.SendPropertyChanged("IsShow")
				Me.OnIsShowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int NOT NULL")>  _
	Public Property Priority() As Integer
		Get
			Return Me._Priority
		End Get
		Set
			If ((Me._Priority = value)  _
						= false) Then
				Me.OnPriorityChanging(value)
				Me.SendPropertyChanging
				Me._Priority = value
				Me.SendPropertyChanged("Priority")
				Me.OnPriorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Access", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Access() As String
		Get
			Return Me._Access
		End Get
		Set
			If (String.Equals(Me._Access, value) = false) Then
				Me.OnAccessChanging(value)
				Me.SendPropertyChanging
				Me._Access = value
				Me.SendPropertyChanged("Access")
				Me.OnAccessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keyword", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Keyword() As String
		Get
			Return Me._Keyword
		End Get
		Set
			If (String.Equals(Me._Keyword, value) = false) Then
				Me.OnKeywordChanging(value)
				Me.SendPropertyChanging
				Me._Keyword = value
				Me.SendPropertyChanged("Keyword")
				Me.OnKeywordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pic", DbType:="NVarChar(1100)")>  _
	Public Property Pic() As String
		Get
			Return Me._Pic
		End Get
		Set
			If (String.Equals(Me._Pic, value) = false) Then
				Me.OnPicChanging(value)
				Me.SendPropertyChanging
				Me._Pic = value
				Me.SendPropertyChanged("Pic")
				Me.OnPicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Moment", DbType:="NVarChar(50)")>  _
	Public Property Moment() As String
		Get
			Return Me._Moment
		End Get
		Set
			If (String.Equals(Me._Moment, value) = false) Then
				Me.OnMomentChanging(value)
				Me.SendPropertyChanging
				Me._Moment = value
				Me.SendPropertyChanged("Moment")
				Me.OnMomentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ContactUs")>  _
Partial Public Class ContactUs
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDCU As Integer
	
	Private _NameAndFamily As String
	
	Private _Email As String
	
	Private _WebSite As String
	
	Private _MSG As String
	
	Private _Date As String
	
	Private _Time As String
	
	Private _Seen As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDCUChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDCUChanged()
    End Sub
    Partial Private Sub OnNameAndFamilyChanging(value As String)
    End Sub
    Partial Private Sub OnNameAndFamilyChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnWebSiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebSiteChanged()
    End Sub
    Partial Private Sub OnMSGChanging(value As String)
    End Sub
    Partial Private Sub OnMSGChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As String)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnTimeChanging(value As String)
    End Sub
    Partial Private Sub OnTimeChanged()
    End Sub
    Partial Private Sub OnSeenChanging(value As String)
    End Sub
    Partial Private Sub OnSeenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCU", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDCU() As Integer
		Get
			Return Me._IDCU
		End Get
		Set
			If ((Me._IDCU = value)  _
						= false) Then
				Me.OnIDCUChanging(value)
				Me.SendPropertyChanging
				Me._IDCU = value
				Me.SendPropertyChanged("IDCU")
				Me.OnIDCUChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameAndFamily", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property NameAndFamily() As String
		Get
			Return Me._NameAndFamily
		End Get
		Set
			If (String.Equals(Me._NameAndFamily, value) = false) Then
				Me.OnNameAndFamilyChanging(value)
				Me.SendPropertyChanging
				Me._NameAndFamily = value
				Me.SendPropertyChanged("NameAndFamily")
				Me.OnNameAndFamilyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebSite", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property WebSite() As String
		Get
			Return Me._WebSite
		End Get
		Set
			If (String.Equals(Me._WebSite, value) = false) Then
				Me.OnWebSiteChanging(value)
				Me.SendPropertyChanging
				Me._WebSite = value
				Me.SendPropertyChanged("WebSite")
				Me.OnWebSiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MSG", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property MSG() As String
		Get
			Return Me._MSG
		End Get
		Set
			If (String.Equals(Me._MSG, value) = false) Then
				Me.OnMSGChanging(value)
				Me.SendPropertyChanging
				Me._MSG = value
				Me.SendPropertyChanged("MSG")
				Me.OnMSGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Time", DbType:="NChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property Time() As String
		Get
			Return Me._Time
		End Get
		Set
			If (String.Equals(Me._Time, value) = false) Then
				Me.OnTimeChanging(value)
				Me.SendPropertyChanging
				Me._Time = value
				Me.SendPropertyChanged("Time")
				Me.OnTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seen", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Seen() As String
		Get
			Return Me._Seen
		End Get
		Set
			If (String.Equals(Me._Seen, value) = false) Then
				Me.OnSeenChanging(value)
				Me.SendPropertyChanging
				Me._Seen = value
				Me.SendPropertyChanged("Seen")
				Me.OnSeenChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FAQ")>  _
Partial Public Class FAQ
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDF As Integer
	
	Private _Question As String
	
	Private _Answer As String
	
	Private _IsShow As Boolean
	
	Private _Moment As String
	
	Private _Keyword As String
	
	Private _Seen As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDFChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDFChanged()
    End Sub
    Partial Private Sub OnQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionChanged()
    End Sub
    Partial Private Sub OnAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerChanged()
    End Sub
    Partial Private Sub OnIsShowChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsShowChanged()
    End Sub
    Partial Private Sub OnMomentChanging(value As String)
    End Sub
    Partial Private Sub OnMomentChanged()
    End Sub
    Partial Private Sub OnKeywordChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordChanged()
    End Sub
    Partial Private Sub OnSeenChanging(value As String)
    End Sub
    Partial Private Sub OnSeenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDF", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDF() As Integer
		Get
			Return Me._IDF
		End Get
		Set
			If ((Me._IDF = value)  _
						= false) Then
				Me.OnIDFChanging(value)
				Me.SendPropertyChanging
				Me._IDF = value
				Me.SendPropertyChanged("IDF")
				Me.OnIDFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Question", DbType:="NVarChar(800) NOT NULL", CanBeNull:=false)>  _
	Public Property Question() As String
		Get
			Return Me._Question
		End Get
		Set
			If (String.Equals(Me._Question, value) = false) Then
				Me.OnQuestionChanging(value)
				Me.SendPropertyChanging
				Me._Question = value
				Me.SendPropertyChanged("Question")
				Me.OnQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Answer() As String
		Get
			Return Me._Answer
		End Get
		Set
			If (String.Equals(Me._Answer, value) = false) Then
				Me.OnAnswerChanging(value)
				Me.SendPropertyChanging
				Me._Answer = value
				Me.SendPropertyChanged("Answer")
				Me.OnAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsShow", DbType:="Bit NOT NULL")>  _
	Public Property IsShow() As Boolean
		Get
			Return Me._IsShow
		End Get
		Set
			If ((Me._IsShow = value)  _
						= false) Then
				Me.OnIsShowChanging(value)
				Me.SendPropertyChanging
				Me._IsShow = value
				Me.SendPropertyChanged("IsShow")
				Me.OnIsShowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Moment", DbType:="NVarChar(50)")>  _
	Public Property Moment() As String
		Get
			Return Me._Moment
		End Get
		Set
			If (String.Equals(Me._Moment, value) = false) Then
				Me.OnMomentChanging(value)
				Me.SendPropertyChanging
				Me._Moment = value
				Me.SendPropertyChanged("Moment")
				Me.OnMomentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keyword", DbType:="NVarChar(500)")>  _
	Public Property Keyword() As String
		Get
			Return Me._Keyword
		End Get
		Set
			If (String.Equals(Me._Keyword, value) = false) Then
				Me.OnKeywordChanging(value)
				Me.SendPropertyChanging
				Me._Keyword = value
				Me.SendPropertyChanged("Keyword")
				Me.OnKeywordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seen", DbType:="NChar(10)")>  _
	Public Property Seen() As String
		Get
			Return Me._Seen
		End Get
		Set
			If (String.Equals(Me._Seen, value) = false) Then
				Me.OnSeenChanging(value)
				Me.SendPropertyChanging
				Me._Seen = value
				Me.SendPropertyChanged("Seen")
				Me.OnSeenChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Visitor")>  _
Partial Public Class Visitor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDV As Integer
	
	Private _AllVisitor As Integer
	
	Private _Today As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDVChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDVChanged()
    End Sub
    Partial Private Sub OnAllVisitorChanging(value As Integer)
    End Sub
    Partial Private Sub OnAllVisitorChanged()
    End Sub
    Partial Private Sub OnTodayChanging(value As Integer)
    End Sub
    Partial Private Sub OnTodayChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDV", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDV() As Integer
		Get
			Return Me._IDV
		End Get
		Set
			If ((Me._IDV = value)  _
						= false) Then
				Me.OnIDVChanging(value)
				Me.SendPropertyChanging
				Me._IDV = value
				Me.SendPropertyChanged("IDV")
				Me.OnIDVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllVisitor", DbType:="Int NOT NULL")>  _
	Public Property AllVisitor() As Integer
		Get
			Return Me._AllVisitor
		End Get
		Set
			If ((Me._AllVisitor = value)  _
						= false) Then
				Me.OnAllVisitorChanging(value)
				Me.SendPropertyChanging
				Me._AllVisitor = value
				Me.SendPropertyChanged("AllVisitor")
				Me.OnAllVisitorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Today", DbType:="Int NOT NULL")>  _
	Public Property Today() As Integer
		Get
			Return Me._Today
		End Get
		Set
			If ((Me._Today = value)  _
						= false) Then
				Me.OnTodayChanging(value)
				Me.SendPropertyChanging
				Me._Today = value
				Me.SendPropertyChanged("Today")
				Me.OnTodayChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UsersOnlineDetails")>  _
Partial Public Class UsersOnlineDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDOnline As Integer
	
	Private _MachinName As String
	
	Private _IPAddress As String
	
	Private _Browser As String
	
	Private _Platform As String
	
	Private _DateAndTime As String
	
	Private _Page As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDOnlineChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDOnlineChanged()
    End Sub
    Partial Private Sub OnMachinNameChanging(value As String)
    End Sub
    Partial Private Sub OnMachinNameChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    Partial Private Sub OnBrowserChanging(value As String)
    End Sub
    Partial Private Sub OnBrowserChanged()
    End Sub
    Partial Private Sub OnPlatformChanging(value As String)
    End Sub
    Partial Private Sub OnPlatformChanged()
    End Sub
    Partial Private Sub OnDateAndTimeChanging(value As String)
    End Sub
    Partial Private Sub OnDateAndTimeChanged()
    End Sub
    Partial Private Sub OnPageChanging(value As String)
    End Sub
    Partial Private Sub OnPageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDOnline", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDOnline() As Integer
		Get
			Return Me._IDOnline
		End Get
		Set
			If ((Me._IDOnline = value)  _
						= false) Then
				Me.OnIDOnlineChanging(value)
				Me.SendPropertyChanging
				Me._IDOnline = value
				Me.SendPropertyChanged("IDOnline")
				Me.OnIDOnlineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MachinName", DbType:="NVarChar(90)")>  _
	Public Property MachinName() As String
		Get
			Return Me._MachinName
		End Get
		Set
			If (String.Equals(Me._MachinName, value) = false) Then
				Me.OnMachinNameChanging(value)
				Me.SendPropertyChanging
				Me._MachinName = value
				Me.SendPropertyChanged("MachinName")
				Me.OnMachinNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NVarChar(20)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Browser", DbType:="NVarChar(50)")>  _
	Public Property Browser() As String
		Get
			Return Me._Browser
		End Get
		Set
			If (String.Equals(Me._Browser, value) = false) Then
				Me.OnBrowserChanging(value)
				Me.SendPropertyChanging
				Me._Browser = value
				Me.SendPropertyChanged("Browser")
				Me.OnBrowserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Platform", DbType:="NVarChar(50)")>  _
	Public Property Platform() As String
		Get
			Return Me._Platform
		End Get
		Set
			If (String.Equals(Me._Platform, value) = false) Then
				Me.OnPlatformChanging(value)
				Me.SendPropertyChanging
				Me._Platform = value
				Me.SendPropertyChanged("Platform")
				Me.OnPlatformChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAndTime", DbType:="NVarChar(60)")>  _
	Public Property DateAndTime() As String
		Get
			Return Me._DateAndTime
		End Get
		Set
			If (String.Equals(Me._DateAndTime, value) = false) Then
				Me.OnDateAndTimeChanging(value)
				Me.SendPropertyChanging
				Me._DateAndTime = value
				Me.SendPropertyChanged("DateAndTime")
				Me.OnDateAndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Page", DbType:="NVarChar(600)")>  _
	Public Property Page() As String
		Get
			Return Me._Page
		End Get
		Set
			If (String.Equals(Me._Page, value) = false) Then
				Me.OnPageChanging(value)
				Me.SendPropertyChanging
				Me._Page = value
				Me.SendPropertyChanged("Page")
				Me.OnPageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Block")>  _
Partial Public Class Block
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDB As Integer
	
	Private _Name As String
	
	Private _Position As String
	
	Private _Priority As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDBChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDBChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPositionChanging(value As String)
    End Sub
    Partial Private Sub OnPositionChanged()
    End Sub
    Partial Private Sub OnPriorityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPriorityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDB", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDB() As Integer
		Get
			Return Me._IDB
		End Get
		Set
			If ((Me._IDB = value)  _
						= false) Then
				Me.OnIDBChanging(value)
				Me.SendPropertyChanging
				Me._IDB = value
				Me.SendPropertyChanged("IDB")
				Me.OnIDBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Position", DbType:="NVarChar(6) NOT NULL", CanBeNull:=false)>  _
	Public Property Position() As String
		Get
			Return Me._Position
		End Get
		Set
			If (String.Equals(Me._Position, value) = false) Then
				Me.OnPositionChanging(value)
				Me.SendPropertyChanging
				Me._Position = value
				Me.SendPropertyChanged("Position")
				Me.OnPositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int")>  _
	Public Property Priority() As System.Nullable(Of Integer)
		Get
			Return Me._Priority
		End Get
		Set
			If (Me._Priority.Equals(value) = false) Then
				Me.OnPriorityChanging(value)
				Me.SendPropertyChanging
				Me._Priority = value
				Me.SendPropertyChanged("Priority")
				Me.OnPriorityChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Category")>  _
Partial Public Class Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDCat As Integer
	
	Private _CatName As String
	
	Private _Description As String
	
	Private _BannerCat As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDCatChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDCatChanged()
    End Sub
    Partial Private Sub OnCatNameChanging(value As String)
    End Sub
    Partial Private Sub OnCatNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnBannerCatChanging(value As String)
    End Sub
    Partial Private Sub OnBannerCatChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCat", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDCat() As Integer
		Get
			Return Me._IDCat
		End Get
		Set
			If ((Me._IDCat = value)  _
						= false) Then
				Me.OnIDCatChanging(value)
				Me.SendPropertyChanging
				Me._IDCat = value
				Me.SendPropertyChanged("IDCat")
				Me.OnIDCatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property CatName() As String
		Get
			Return Me._CatName
		End Get
		Set
			If (String.Equals(Me._CatName, value) = false) Then
				Me.OnCatNameChanging(value)
				Me.SendPropertyChanging
				Me._CatName = value
				Me.SendPropertyChanged("CatName")
				Me.OnCatNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BannerCat", DbType:="NVarChar(1100) NOT NULL", CanBeNull:=false)>  _
	Public Property BannerCat() As String
		Get
			Return Me._BannerCat
		End Get
		Set
			If (String.Equals(Me._BannerCat, value) = false) Then
				Me.OnBannerCatChanging(value)
				Me.SendPropertyChanging
				Me._BannerCat = value
				Me.SendPropertyChanged("BannerCat")
				Me.OnBannerCatChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Product")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDP As Integer
	
	Private _CatName As String
	
	Private _Name As String
	
	Private _Brand As String
	
	Private _Model As String
	
	Private _Price As String
	
	Private _Rank As Integer
	
	Private _Description As String
	
	Private _IDCat As Integer
	
	Private _KeyWord As String
	
	Private _Pic As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDPChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDPChanged()
    End Sub
    Partial Private Sub OnCatNameChanging(value As String)
    End Sub
    Partial Private Sub OnCatNameChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnBrandChanging(value As String)
    End Sub
    Partial Private Sub OnBrandChanged()
    End Sub
    Partial Private Sub OnModelChanging(value As String)
    End Sub
    Partial Private Sub OnModelChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As String)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnRankChanging(value As Integer)
    End Sub
    Partial Private Sub OnRankChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIDCatChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDCatChanged()
    End Sub
    Partial Private Sub OnKeyWordChanging(value As String)
    End Sub
    Partial Private Sub OnKeyWordChanged()
    End Sub
    Partial Private Sub OnPicChanging(value As String)
    End Sub
    Partial Private Sub OnPicChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDP", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDP() As Integer
		Get
			Return Me._IDP
		End Get
		Set
			If ((Me._IDP = value)  _
						= false) Then
				Me.OnIDPChanging(value)
				Me.SendPropertyChanging
				Me._IDP = value
				Me.SendPropertyChanged("IDP")
				Me.OnIDPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatName", DbType:="NVarChar(150)")>  _
	Public Property CatName() As String
		Get
			Return Me._CatName
		End Get
		Set
			If (String.Equals(Me._CatName, value) = false) Then
				Me.OnCatNameChanging(value)
				Me.SendPropertyChanging
				Me._CatName = value
				Me.SendPropertyChanged("CatName")
				Me.OnCatNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Brand", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Brand() As String
		Get
			Return Me._Brand
		End Get
		Set
			If (String.Equals(Me._Brand, value) = false) Then
				Me.OnBrandChanging(value)
				Me.SendPropertyChanging
				Me._Brand = value
				Me.SendPropertyChanged("Brand")
				Me.OnBrandChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Model", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Model() As String
		Get
			Return Me._Model
		End Get
		Set
			If (String.Equals(Me._Model, value) = false) Then
				Me.OnModelChanging(value)
				Me.SendPropertyChanging
				Me._Model = value
				Me.SendPropertyChanged("Model")
				Me.OnModelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Price() As String
		Get
			Return Me._Price
		End Get
		Set
			If (String.Equals(Me._Price, value) = false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rank", DbType:="Int NOT NULL")>  _
	Public Property Rank() As Integer
		Get
			Return Me._Rank
		End Get
		Set
			If ((Me._Rank = value)  _
						= false) Then
				Me.OnRankChanging(value)
				Me.SendPropertyChanging
				Me._Rank = value
				Me.SendPropertyChanged("Rank")
				Me.OnRankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCat", DbType:="Int NOT NULL")>  _
	Public Property IDCat() As Integer
		Get
			Return Me._IDCat
		End Get
		Set
			If ((Me._IDCat = value)  _
						= false) Then
				Me.OnIDCatChanging(value)
				Me.SendPropertyChanging
				Me._IDCat = value
				Me.SendPropertyChanged("IDCat")
				Me.OnIDCatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KeyWord", DbType:="NVarChar(800)")>  _
	Public Property KeyWord() As String
		Get
			Return Me._KeyWord
		End Get
		Set
			If (String.Equals(Me._KeyWord, value) = false) Then
				Me.OnKeyWordChanging(value)
				Me.SendPropertyChanging
				Me._KeyWord = value
				Me.SendPropertyChanged("KeyWord")
				Me.OnKeyWordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pic", DbType:="NVarChar(1100)")>  _
	Public Property Pic() As String
		Get
			Return Me._Pic
		End Get
		Set
			If (String.Equals(Me._Pic, value) = false) Then
				Me.OnPicChanging(value)
				Me.SendPropertyChanging
				Me._Pic = value
				Me.SendPropertyChanged("Pic")
				Me.OnPicChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Comment")>  _
Partial Public Class Comment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDC As Integer
	
	Private _NameAndFamily As String
	
	Private _Email As String
	
	Private _WebSite As String
	
	Private _MSG As String
	
	Private _Date As String
	
	Private _Time As String
	
	Private _IsShow As Boolean
	
	Private _Seen As String
	
	Private _Priority As Integer
	
	Private _Access As String
	
	Private _Keyword As String
	
	Private _IDClient As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDCChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDCChanged()
    End Sub
    Partial Private Sub OnNameAndFamilyChanging(value As String)
    End Sub
    Partial Private Sub OnNameAndFamilyChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnWebSiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebSiteChanged()
    End Sub
    Partial Private Sub OnMSGChanging(value As String)
    End Sub
    Partial Private Sub OnMSGChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As String)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnTimeChanging(value As String)
    End Sub
    Partial Private Sub OnTimeChanged()
    End Sub
    Partial Private Sub OnIsShowChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsShowChanged()
    End Sub
    Partial Private Sub OnSeenChanging(value As String)
    End Sub
    Partial Private Sub OnSeenChanged()
    End Sub
    Partial Private Sub OnPriorityChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriorityChanged()
    End Sub
    Partial Private Sub OnAccessChanging(value As String)
    End Sub
    Partial Private Sub OnAccessChanged()
    End Sub
    Partial Private Sub OnKeywordChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordChanged()
    End Sub
    Partial Private Sub OnIDClientChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDClientChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDC", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDC() As Integer
		Get
			Return Me._IDC
		End Get
		Set
			If ((Me._IDC = value)  _
						= false) Then
				Me.OnIDCChanging(value)
				Me.SendPropertyChanging
				Me._IDC = value
				Me.SendPropertyChanged("IDC")
				Me.OnIDCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameAndFamily", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property NameAndFamily() As String
		Get
			Return Me._NameAndFamily
		End Get
		Set
			If (String.Equals(Me._NameAndFamily, value) = false) Then
				Me.OnNameAndFamilyChanging(value)
				Me.SendPropertyChanging
				Me._NameAndFamily = value
				Me.SendPropertyChanged("NameAndFamily")
				Me.OnNameAndFamilyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebSite", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property WebSite() As String
		Get
			Return Me._WebSite
		End Get
		Set
			If (String.Equals(Me._WebSite, value) = false) Then
				Me.OnWebSiteChanging(value)
				Me.SendPropertyChanging
				Me._WebSite = value
				Me.SendPropertyChanged("WebSite")
				Me.OnWebSiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MSG", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property MSG() As String
		Get
			Return Me._MSG
		End Get
		Set
			If (String.Equals(Me._MSG, value) = false) Then
				Me.OnMSGChanging(value)
				Me.SendPropertyChanging
				Me._MSG = value
				Me.SendPropertyChanged("MSG")
				Me.OnMSGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Time", DbType:="NVarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property Time() As String
		Get
			Return Me._Time
		End Get
		Set
			If (String.Equals(Me._Time, value) = false) Then
				Me.OnTimeChanging(value)
				Me.SendPropertyChanging
				Me._Time = value
				Me.SendPropertyChanged("Time")
				Me.OnTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsShow", DbType:="Bit NOT NULL")>  _
	Public Property IsShow() As Boolean
		Get
			Return Me._IsShow
		End Get
		Set
			If ((Me._IsShow = value)  _
						= false) Then
				Me.OnIsShowChanging(value)
				Me.SendPropertyChanging
				Me._IsShow = value
				Me.SendPropertyChanged("IsShow")
				Me.OnIsShowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seen", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Seen() As String
		Get
			Return Me._Seen
		End Get
		Set
			If (String.Equals(Me._Seen, value) = false) Then
				Me.OnSeenChanging(value)
				Me.SendPropertyChanging
				Me._Seen = value
				Me.SendPropertyChanged("Seen")
				Me.OnSeenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int NOT NULL")>  _
	Public Property Priority() As Integer
		Get
			Return Me._Priority
		End Get
		Set
			If ((Me._Priority = value)  _
						= false) Then
				Me.OnPriorityChanging(value)
				Me.SendPropertyChanging
				Me._Priority = value
				Me.SendPropertyChanged("Priority")
				Me.OnPriorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Access", DbType:="NVarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property Access() As String
		Get
			Return Me._Access
		End Get
		Set
			If (String.Equals(Me._Access, value) = false) Then
				Me.OnAccessChanging(value)
				Me.SendPropertyChanging
				Me._Access = value
				Me.SendPropertyChanged("Access")
				Me.OnAccessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keyword", DbType:="NVarChar(100)")>  _
	Public Property Keyword() As String
		Get
			Return Me._Keyword
		End Get
		Set
			If (String.Equals(Me._Keyword, value) = false) Then
				Me.OnKeywordChanging(value)
				Me.SendPropertyChanging
				Me._Keyword = value
				Me.SendPropertyChanged("Keyword")
				Me.OnKeywordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDClient", DbType:="Int")>  _
	Public Property IDClient() As System.Nullable(Of Integer)
		Get
			Return Me._IDClient
		End Get
		Set
			If (Me._IDClient.Equals(value) = false) Then
				Me.OnIDClientChanging(value)
				Me.SendPropertyChanging
				Me._IDClient = value
				Me.SendPropertyChanged("IDClient")
				Me.OnIDClientChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Link")>  _
Partial Public Class Link
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDL As Integer
	
	Private _Name As String
	
	Private _Address As String
	
	Private _Alt As String
	
	Private _IDB As Integer
	
	Private _Target As String
	
	Private _Priority As System.Nullable(Of Integer)
	
	Private _IsHTML As System.Nullable(Of Boolean)
	
	Private _BodyHTML As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDLChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDLChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnAltChanging(value As String)
    End Sub
    Partial Private Sub OnAltChanged()
    End Sub
    Partial Private Sub OnIDBChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDBChanged()
    End Sub
    Partial Private Sub OnTargetChanging(value As String)
    End Sub
    Partial Private Sub OnTargetChanged()
    End Sub
    Partial Private Sub OnPriorityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPriorityChanged()
    End Sub
    Partial Private Sub OnIsHTMLChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsHTMLChanged()
    End Sub
    Partial Private Sub OnBodyHTMLChanging(value As String)
    End Sub
    Partial Private Sub OnBodyHTMLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDL", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDL() As Integer
		Get
			Return Me._IDL
		End Get
		Set
			If ((Me._IDL = value)  _
						= false) Then
				Me.OnIDLChanging(value)
				Me.SendPropertyChanging
				Me._IDL = value
				Me.SendPropertyChanged("IDL")
				Me.OnIDLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(1100) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Alt", DbType:="NVarChar(1100)")>  _
	Public Property Alt() As String
		Get
			Return Me._Alt
		End Get
		Set
			If (String.Equals(Me._Alt, value) = false) Then
				Me.OnAltChanging(value)
				Me.SendPropertyChanging
				Me._Alt = value
				Me.SendPropertyChanged("Alt")
				Me.OnAltChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDB", DbType:="Int NOT NULL")>  _
	Public Property IDB() As Integer
		Get
			Return Me._IDB
		End Get
		Set
			If ((Me._IDB = value)  _
						= false) Then
				Me.OnIDBChanging(value)
				Me.SendPropertyChanging
				Me._IDB = value
				Me.SendPropertyChanged("IDB")
				Me.OnIDBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Target", DbType:="NVarChar(7) NOT NULL", CanBeNull:=false)>  _
	Public Property Target() As String
		Get
			Return Me._Target
		End Get
		Set
			If (String.Equals(Me._Target, value) = false) Then
				Me.OnTargetChanging(value)
				Me.SendPropertyChanging
				Me._Target = value
				Me.SendPropertyChanged("Target")
				Me.OnTargetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int")>  _
	Public Property Priority() As System.Nullable(Of Integer)
		Get
			Return Me._Priority
		End Get
		Set
			If (Me._Priority.Equals(value) = false) Then
				Me.OnPriorityChanging(value)
				Me.SendPropertyChanging
				Me._Priority = value
				Me.SendPropertyChanged("Priority")
				Me.OnPriorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHTML", DbType:="Bit")>  _
	Public Property IsHTML() As System.Nullable(Of Boolean)
		Get
			Return Me._IsHTML
		End Get
		Set
			If (Me._IsHTML.Equals(value) = false) Then
				Me.OnIsHTMLChanging(value)
				Me.SendPropertyChanging
				Me._IsHTML = value
				Me.SendPropertyChanged("IsHTML")
				Me.OnIsHTMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BodyHTML", DbType:="NVarChar(MAX)")>  _
	Public Property BodyHTML() As String
		Get
			Return Me._BodyHTML
		End Get
		Set
			If (String.Equals(Me._BodyHTML, value) = false) Then
				Me.OnBodyHTMLChanging(value)
				Me.SendPropertyChanging
				Me._BodyHTML = value
				Me.SendPropertyChanged("BodyHTML")
				Me.OnBodyHTMLChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order]")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDO As Integer
	
	Private _NameAndFamily As String
	
	Private _Email As String
	
	Private _Tel As String
	
	Private _Mobile As String
	
	Private _Job As String
	
	Private _Address As String
	
	Private _NewDesign As System.Nullable(Of Boolean)
	
	Private _SiteNameFA As String
	
	Private _SiteNameEn As String
	
	Private _SiteSubject As String
	
	Private _Customers As String
	
	Private _Competition As String
	
	Private _Service As String
	
	Private _DeadLine As String
	
	Private _SuggestedCosts As String
	
	Private _SampleSite As String
	
	Private _Requirements As String
	
	Private _PurposeExistingSite As String
	
	Private _Possibilities As String
	
	Private _Style As String
	
	Private _Thesis As String
	
	Private _Advice As System.Nullable(Of Boolean)
	
	Private _Description As String
	
	Private _ActiveForClient As System.Nullable(Of Boolean)
	
	Private _SPL As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDOChanged()
    End Sub
    Partial Private Sub OnNameAndFamilyChanging(value As String)
    End Sub
    Partial Private Sub OnNameAndFamilyChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTelChanging(value As String)
    End Sub
    Partial Private Sub OnTelChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnJobChanging(value As String)
    End Sub
    Partial Private Sub OnJobChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnNewDesignChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNewDesignChanged()
    End Sub
    Partial Private Sub OnSiteNameFAChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameFAChanged()
    End Sub
    Partial Private Sub OnSiteNameEnChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameEnChanged()
    End Sub
    Partial Private Sub OnSiteSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnSiteSubjectChanged()
    End Sub
    Partial Private Sub OnCustomersChanging(value As String)
    End Sub
    Partial Private Sub OnCustomersChanged()
    End Sub
    Partial Private Sub OnCompetitionChanging(value As String)
    End Sub
    Partial Private Sub OnCompetitionChanged()
    End Sub
    Partial Private Sub OnServiceChanging(value As String)
    End Sub
    Partial Private Sub OnServiceChanged()
    End Sub
    Partial Private Sub OnDeadLineChanging(value As String)
    End Sub
    Partial Private Sub OnDeadLineChanged()
    End Sub
    Partial Private Sub OnSuggestedCostsChanging(value As String)
    End Sub
    Partial Private Sub OnSuggestedCostsChanged()
    End Sub
    Partial Private Sub OnSampleSiteChanging(value As String)
    End Sub
    Partial Private Sub OnSampleSiteChanged()
    End Sub
    Partial Private Sub OnRequirementsChanging(value As String)
    End Sub
    Partial Private Sub OnRequirementsChanged()
    End Sub
    Partial Private Sub OnPurposeExistingSiteChanging(value As String)
    End Sub
    Partial Private Sub OnPurposeExistingSiteChanged()
    End Sub
    Partial Private Sub OnPossibilitiesChanging(value As String)
    End Sub
    Partial Private Sub OnPossibilitiesChanged()
    End Sub
    Partial Private Sub OnStyleChanging(value As String)
    End Sub
    Partial Private Sub OnStyleChanged()
    End Sub
    Partial Private Sub OnThesisChanging(value As String)
    End Sub
    Partial Private Sub OnThesisChanged()
    End Sub
    Partial Private Sub OnAdviceChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAdviceChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnActiveForClientChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveForClientChanged()
    End Sub
    Partial Private Sub OnSPLChanging(value As String)
    End Sub
    Partial Private Sub OnSPLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDO() As Integer
		Get
			Return Me._IDO
		End Get
		Set
			If ((Me._IDO = value)  _
						= false) Then
				Me.OnIDOChanging(value)
				Me.SendPropertyChanging
				Me._IDO = value
				Me.SendPropertyChanged("IDO")
				Me.OnIDOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameAndFamily", DbType:="NVarChar(500)")>  _
	Public Property NameAndFamily() As String
		Get
			Return Me._NameAndFamily
		End Get
		Set
			If (String.Equals(Me._NameAndFamily, value) = false) Then
				Me.OnNameAndFamilyChanging(value)
				Me.SendPropertyChanging
				Me._NameAndFamily = value
				Me.SendPropertyChanged("NameAndFamily")
				Me.OnNameAndFamilyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(200)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tel", DbType:="NChar(11)")>  _
	Public Property Tel() As String
		Get
			Return Me._Tel
		End Get
		Set
			If (String.Equals(Me._Tel, value) = false) Then
				Me.OnTelChanging(value)
				Me.SendPropertyChanging
				Me._Tel = value
				Me.SendPropertyChanged("Tel")
				Me.OnTelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NChar(11)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Job", DbType:="NVarChar(500)")>  _
	Public Property Job() As String
		Get
			Return Me._Job
		End Get
		Set
			If (String.Equals(Me._Job, value) = false) Then
				Me.OnJobChanging(value)
				Me.SendPropertyChanging
				Me._Job = value
				Me.SendPropertyChanged("Job")
				Me.OnJobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(1000)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewDesign", DbType:="Bit")>  _
	Public Property NewDesign() As System.Nullable(Of Boolean)
		Get
			Return Me._NewDesign
		End Get
		Set
			If (Me._NewDesign.Equals(value) = false) Then
				Me.OnNewDesignChanging(value)
				Me.SendPropertyChanging
				Me._NewDesign = value
				Me.SendPropertyChanged("NewDesign")
				Me.OnNewDesignChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteNameFA", DbType:="NVarChar(100)")>  _
	Public Property SiteNameFA() As String
		Get
			Return Me._SiteNameFA
		End Get
		Set
			If (String.Equals(Me._SiteNameFA, value) = false) Then
				Me.OnSiteNameFAChanging(value)
				Me.SendPropertyChanging
				Me._SiteNameFA = value
				Me.SendPropertyChanged("SiteNameFA")
				Me.OnSiteNameFAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteNameEn", DbType:="NVarChar(100)")>  _
	Public Property SiteNameEn() As String
		Get
			Return Me._SiteNameEn
		End Get
		Set
			If (String.Equals(Me._SiteNameEn, value) = false) Then
				Me.OnSiteNameEnChanging(value)
				Me.SendPropertyChanging
				Me._SiteNameEn = value
				Me.SendPropertyChanged("SiteNameEn")
				Me.OnSiteNameEnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteSubject", DbType:="NVarChar(100)")>  _
	Public Property SiteSubject() As String
		Get
			Return Me._SiteSubject
		End Get
		Set
			If (String.Equals(Me._SiteSubject, value) = false) Then
				Me.OnSiteSubjectChanging(value)
				Me.SendPropertyChanging
				Me._SiteSubject = value
				Me.SendPropertyChanged("SiteSubject")
				Me.OnSiteSubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Customers", DbType:="NVarChar(1000)")>  _
	Public Property Customers() As String
		Get
			Return Me._Customers
		End Get
		Set
			If (String.Equals(Me._Customers, value) = false) Then
				Me.OnCustomersChanging(value)
				Me.SendPropertyChanging
				Me._Customers = value
				Me.SendPropertyChanged("Customers")
				Me.OnCustomersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Competition", DbType:="NVarChar(2000)")>  _
	Public Property Competition() As String
		Get
			Return Me._Competition
		End Get
		Set
			If (String.Equals(Me._Competition, value) = false) Then
				Me.OnCompetitionChanging(value)
				Me.SendPropertyChanging
				Me._Competition = value
				Me.SendPropertyChanged("Competition")
				Me.OnCompetitionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Service", DbType:="NVarChar(4000)")>  _
	Public Property Service() As String
		Get
			Return Me._Service
		End Get
		Set
			If (String.Equals(Me._Service, value) = false) Then
				Me.OnServiceChanging(value)
				Me.SendPropertyChanging
				Me._Service = value
				Me.SendPropertyChanged("Service")
				Me.OnServiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeadLine", DbType:="NVarChar(50)")>  _
	Public Property DeadLine() As String
		Get
			Return Me._DeadLine
		End Get
		Set
			If (String.Equals(Me._DeadLine, value) = false) Then
				Me.OnDeadLineChanging(value)
				Me.SendPropertyChanging
				Me._DeadLine = value
				Me.SendPropertyChanged("DeadLine")
				Me.OnDeadLineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SuggestedCosts", DbType:="NVarChar(100)")>  _
	Public Property SuggestedCosts() As String
		Get
			Return Me._SuggestedCosts
		End Get
		Set
			If (String.Equals(Me._SuggestedCosts, value) = false) Then
				Me.OnSuggestedCostsChanging(value)
				Me.SendPropertyChanging
				Me._SuggestedCosts = value
				Me.SendPropertyChanged("SuggestedCosts")
				Me.OnSuggestedCostsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SampleSite", DbType:="NVarChar(3000)")>  _
	Public Property SampleSite() As String
		Get
			Return Me._SampleSite
		End Get
		Set
			If (String.Equals(Me._SampleSite, value) = false) Then
				Me.OnSampleSiteChanging(value)
				Me.SendPropertyChanging
				Me._SampleSite = value
				Me.SendPropertyChanged("SampleSite")
				Me.OnSampleSiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requirements", DbType:="NVarChar(3000)")>  _
	Public Property Requirements() As String
		Get
			Return Me._Requirements
		End Get
		Set
			If (String.Equals(Me._Requirements, value) = false) Then
				Me.OnRequirementsChanging(value)
				Me.SendPropertyChanging
				Me._Requirements = value
				Me.SendPropertyChanged("Requirements")
				Me.OnRequirementsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurposeExistingSite", DbType:="NVarChar(3000)")>  _
	Public Property PurposeExistingSite() As String
		Get
			Return Me._PurposeExistingSite
		End Get
		Set
			If (String.Equals(Me._PurposeExistingSite, value) = false) Then
				Me.OnPurposeExistingSiteChanging(value)
				Me.SendPropertyChanging
				Me._PurposeExistingSite = value
				Me.SendPropertyChanged("PurposeExistingSite")
				Me.OnPurposeExistingSiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Possibilities", DbType:="NVarChar(4000)")>  _
	Public Property Possibilities() As String
		Get
			Return Me._Possibilities
		End Get
		Set
			If (String.Equals(Me._Possibilities, value) = false) Then
				Me.OnPossibilitiesChanging(value)
				Me.SendPropertyChanging
				Me._Possibilities = value
				Me.SendPropertyChanged("Possibilities")
				Me.OnPossibilitiesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Style", DbType:="NVarChar(3000)")>  _
	Public Property Style() As String
		Get
			Return Me._Style
		End Get
		Set
			If (String.Equals(Me._Style, value) = false) Then
				Me.OnStyleChanging(value)
				Me.SendPropertyChanging
				Me._Style = value
				Me.SendPropertyChanged("Style")
				Me.OnStyleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Thesis", DbType:="NVarChar(1000)")>  _
	Public Property Thesis() As String
		Get
			Return Me._Thesis
		End Get
		Set
			If (String.Equals(Me._Thesis, value) = false) Then
				Me.OnThesisChanging(value)
				Me.SendPropertyChanging
				Me._Thesis = value
				Me.SendPropertyChanged("Thesis")
				Me.OnThesisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Advice", DbType:="Bit")>  _
	Public Property Advice() As System.Nullable(Of Boolean)
		Get
			Return Me._Advice
		End Get
		Set
			If (Me._Advice.Equals(value) = false) Then
				Me.OnAdviceChanging(value)
				Me.SendPropertyChanging
				Me._Advice = value
				Me.SendPropertyChanged("Advice")
				Me.OnAdviceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1000)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActiveForClient", DbType:="Bit")>  _
	Public Property ActiveForClient() As System.Nullable(Of Boolean)
		Get
			Return Me._ActiveForClient
		End Get
		Set
			If (Me._ActiveForClient.Equals(value) = false) Then
				Me.OnActiveForClientChanging(value)
				Me.SendPropertyChanging
				Me._ActiveForClient = value
				Me.SendPropertyChanged("ActiveForClient")
				Me.OnActiveForClientChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SPL", DbType:="NVarChar(MAX)")>  _
	Public Property SPL() As String
		Get
			Return Me._SPL
		End Get
		Set
			If (String.Equals(Me._SPL, value) = false) Then
				Me.OnSPLChanging(value)
				Me.SendPropertyChanging
				Me._SPL = value
				Me.SendPropertyChanged("SPL")
				Me.OnSPLChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Client")>  _
Partial Public Class Client
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDClient As Integer
	
	Private _Username As String
	
	Private _Password As String
	
	Private _IDO As System.Nullable(Of Integer)
	
	Private _Photo As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDClientChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDClientChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnIDOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDOChanged()
    End Sub
    Partial Private Sub OnPhotoChanging(value As String)
    End Sub
    Partial Private Sub OnPhotoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDClient", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDClient() As Integer
		Get
			Return Me._IDClient
		End Get
		Set
			If ((Me._IDClient = value)  _
						= false) Then
				Me.OnIDClientChanging(value)
				Me.SendPropertyChanging
				Me._IDClient = value
				Me.SendPropertyChanged("IDClient")
				Me.OnIDClientChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(500)")>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(500)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDO", DbType:="Int")>  _
	Public Property IDO() As System.Nullable(Of Integer)
		Get
			Return Me._IDO
		End Get
		Set
			If (Me._IDO.Equals(value) = false) Then
				Me.OnIDOChanging(value)
				Me.SendPropertyChanging
				Me._IDO = value
				Me.SendPropertyChanged("IDO")
				Me.OnIDOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Photo", DbType:="NVarChar(500)")>  _
	Public Property Photo() As String
		Get
			Return Me._Photo
		End Get
		Set
			If (String.Equals(Me._Photo, value) = false) Then
				Me.OnPhotoChanging(value)
				Me.SendPropertyChanging
				Me._Photo = value
				Me.SendPropertyChanged("Photo")
				Me.OnPhotoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Process")>  _
Partial Public Class Process
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDProc As Integer
	
	Private _IDCon As Integer
	
	Private _TitleProccess As String
	
	Private _EndProc As Boolean
	
	Private _Delay As Integer
	
	Private _Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDProcChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDProcChanged()
    End Sub
    Partial Private Sub OnIDConChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDConChanged()
    End Sub
    Partial Private Sub OnTitleProccessChanging(value As String)
    End Sub
    Partial Private Sub OnTitleProccessChanged()
    End Sub
    Partial Private Sub OnEndProcChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEndProcChanged()
    End Sub
    Partial Private Sub OnDelayChanging(value As Integer)
    End Sub
    Partial Private Sub OnDelayChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDProc", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDProc() As Integer
		Get
			Return Me._IDProc
		End Get
		Set
			If ((Me._IDProc = value)  _
						= false) Then
				Me.OnIDProcChanging(value)
				Me.SendPropertyChanging
				Me._IDProc = value
				Me.SendPropertyChanged("IDProc")
				Me.OnIDProcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCon", DbType:="Int NOT NULL")>  _
	Public Property IDCon() As Integer
		Get
			Return Me._IDCon
		End Get
		Set
			If ((Me._IDCon = value)  _
						= false) Then
				Me.OnIDConChanging(value)
				Me.SendPropertyChanging
				Me._IDCon = value
				Me.SendPropertyChanged("IDCon")
				Me.OnIDConChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitleProccess", DbType:="NVarChar(1500) NOT NULL", CanBeNull:=false)>  _
	Public Property TitleProccess() As String
		Get
			Return Me._TitleProccess
		End Get
		Set
			If (String.Equals(Me._TitleProccess, value) = false) Then
				Me.OnTitleProccessChanging(value)
				Me.SendPropertyChanging
				Me._TitleProccess = value
				Me.SendPropertyChanged("TitleProccess")
				Me.OnTitleProccessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndProc", DbType:="Bit NOT NULL")>  _
	Public Property EndProc() As Boolean
		Get
			Return Me._EndProc
		End Get
		Set
			If ((Me._EndProc = value)  _
						= false) Then
				Me.OnEndProcChanging(value)
				Me.SendPropertyChanging
				Me._EndProc = value
				Me.SendPropertyChanged("EndProc")
				Me.OnEndProcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Delay", DbType:="Int NOT NULL")>  _
	Public Property Delay() As Integer
		Get
			Return Me._Delay
		End Get
		Set
			If ((Me._Delay = value)  _
						= false) Then
				Me.OnDelayChanging(value)
				Me.SendPropertyChanging
				Me._Delay = value
				Me.SendPropertyChanged("Delay")
				Me.OnDelayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1500) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contract")>  _
Partial Public Class Contract
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDCon As Integer
	
	Private _IDO As Integer
	
	Private _Title As String
	
	Private _Contract As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDConChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDConChanged()
    End Sub
    Partial Private Sub OnIDOChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDOChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnContractChanging(value As String)
    End Sub
    Partial Private Sub OnContractChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCon", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDCon() As Integer
		Get
			Return Me._IDCon
		End Get
		Set
			If ((Me._IDCon = value)  _
						= false) Then
				Me.OnIDConChanging(value)
				Me.SendPropertyChanging
				Me._IDCon = value
				Me.SendPropertyChanged("IDCon")
				Me.OnIDConChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDO", DbType:="Int NOT NULL")>  _
	Public Property IDO() As Integer
		Get
			Return Me._IDO
		End Get
		Set
			If ((Me._IDO = value)  _
						= false) Then
				Me.OnIDOChanging(value)
				Me.SendPropertyChanging
				Me._IDO = value
				Me.SendPropertyChanged("IDO")
				Me.OnIDOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(200)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contract", DbType:="NVarChar(MAX)")>  _
	Public Property Contract() As String
		Get
			Return Me._Contract
		End Get
		Set
			If (String.Equals(Me._Contract, value) = false) Then
				Me.OnContractChanging(value)
				Me.SendPropertyChanging
				Me._Contract = value
				Me.SendPropertyChanged("Contract")
				Me.OnContractChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
